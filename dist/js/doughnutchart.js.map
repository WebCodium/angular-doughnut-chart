{"version":3,"sources":["doughnut.js"],"names":[],"mappingsfile":"doughnutchart.js","sourcesContent":["angular\n    .module('angular-doughnut-chart', [])\n    .directive('doughnutChart', ['$animateCss', '$interval', '$timeout', function ($animateCss, $interval, $timeout) {\n        'use strict';\n\n        var config = {\n            stroke: 14\n        };\n\n        var service = {\n            index: 0,\n            // credits to http://modernizr.com/ for the feature test\n            isSupported: !!(document.createElementNS && document.createElementNS('http://www.w3.org/2000/svg', \"svg\").createSVGRect),\n            getPercent: function (percent, length) {\n                return (100 - percent) * length / 100;\n            },\n            getLengthCircle: function (radius) {\n                return Math.floor(Math.PI * 2 * radius);\n            },\n            setCircleAttrs: function (radius, stroke) {\n                return {\n                    r: radius,\n                    cx: -(radius + stroke / 2),\n                    cy: radius + stroke / 2\n                };\n            },\n            getClass: function () {\n                return 'doughnut-chart-' + (this.index++);\n            }\n        };\n\n        var base = {\n            restrict: \"E\",\n            scope: {\n                percentage: \"=\",\n                stroke: \"=\"\n            }\n        };\n\n        //message for browsers which don't support svg\n        if (!service.isSupported) {\n            return angular.extend(base, {\n                template: '<div class=\"doughnut-chart-wrapper\">Not supported</div>'\n            });\n        }\n        return angular.extend(base, {\n            link: function (scope, element) {\n                scope.stroke = scope.stroke || config.stroke;\n\n                function setDashOffset() {\n                    scope.oldPecentage = scope.oldPecentage || 0;\n                    scope.curPercent = scope.oldPecentage;\n                    var diff = scope.percentage - scope.oldPecentage;\n                    scope.curPercent += diff > 0 ? 1 : -1;\n                    scope.intervalText = $interval(function () {\n                        scope.curPercent += diff > 0 ? 1 : -1;\n                        if (scope.curPercent === scope.percentage)\n                            $interval.cancel(scope.intervalText);\n                    }, 1000 / Math.abs(diff));\n                    $animateCss(element.find('circle').eq(1), {\n                        to: {'stroke-dashoffset': service.getPercent(scope.percentage, scope.length)}\n                    }).start();\n                }\n\n                function firstAnimate() {\n                    scope.animate = true;\n                    $animateCss(element.find('circle').eq(1), {\n                        addClass: 'doughnut-allow-animation'\n                    }).start().then(setDashOffset);\n                }\n\n                function drawDoughNut(resize) {\n                    scope.radius = (document.querySelectorAll('.' + scope.class)[0].offsetWidth - scope.stroke) / 2;\n                    scope.length = service.getLengthCircle(scope.radius);\n                    $animateCss(element.find('circle').eq(1), {\n                        to: {'stroke-dashoffset': scope.length}\n                    }).start().then(function () {\n                        scope.drawed = true;\n                        //set cx, cy and r for circles\n                        scope.circles = element.find('circle').attr(\n                            service.setCircleAttrs(scope.radius, scope.stroke)\n                        );\n                        if (resize) {\n                            scope.circles.eq(1).removeClass('doughnut-allow-animation');\n                            setDashOffset();\n                        }\n                        //for animation on load\n                        if (scope.percentage && !scope.animate) {\n                            firstAnimate();\n                        }\n                    });\n                }\n\n                scope.class = service.getClass();\n                $animateCss(element.children(), {\n                    addClass: scope.class\n                }).start().then(drawDoughNut);\n\n                //watch for percentage\n                scope.$watch('percentage', function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        scope.percentage = newValue;\n                        scope.oldPecentage = oldValue;\n                        if (scope.animate) {\n                            scope.circles.eq(1).addClass('doughnut-allow-animation');\n                            setDashOffset();\n                        } else if (scope.drawed) {\n                            //for first animation when percent gets asynchronously\n                            firstAnimate();\n                        }\n                    }\n                });\n                angular.element(window).on('resize', function () {\n                    drawDoughNut(true);\n                });\n            },\n            template: '<div class=\"doughnut-chart-wrapper\">' +\n            '<div class=\"dough-text-suffix\"><span class=\"dough-text\">{{curPercent}}</span><sup class=\"dough-suffix\">%</sup></div>' +\n            '<svg xmlns=\"http://www.w3.org/2000/svg\">' +\n            '<circle fill=\"none\" class=\"circle-bg\" stroke-width=\"{{stroke}}\"/>' +\n            '<circle fill=\"none\" class=\"circle-animation\" stroke-width=\"{{stroke}}\" style=\"stroke-dasharray: {{length}};\"/>' +\n            '</svg>' +\n            '</div>'\n        });\n    }]);"],"sourceRoot":"/source/"}